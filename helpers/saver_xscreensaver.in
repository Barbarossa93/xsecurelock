#!/bin/sh
#
# Copyright 2014 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

: ${XSECURELOCK_XSCREENSAVER_PATH:=@with_xscreensaver@}

allsavers() {
  if [ -f ~/.xscreensaver ]; then
    printf "%b" "$(
      xrdb -n ~/.xscreensaver 2>/dev/null |\
      grep ^programs: |\
      cut -d : -f 2-
    )" |\
      sed -e '
        s/^[[:space:]]*//;                # Strip whitespace.
        /^-/d;                            # Remove disabled hacks.
        s/^[^[:space:]]*:[[:space:]]*//;  # Remove visual name.
        s/^"[^"]*"[[:space:]]*//;         # Remove hack name.
      '
  else
    ls "$XSECURELOCK_XSCREENSAVER_PATH" |\
      sed -e 's/$/ -root/'
  fi | while read -r saver flags; do
    [ -x "$XSECURELOCK_XSCREENSAVER_PATH/$saver" ] || continue
    printf '%s/%s\n' "$XSECURELOCK_XSCREENSAVER_PATH" "$saver $flags"
  done
}

# We're using the parent process ID here, which may be a saver_multiplex
# instance. This ensures that multiple instances of this always spawn the same
# saver on each screen.
random=$PPID

randomsaver() {
  savers=$(allsavers)
  count=$(printf '%s\n' "$savers" | wc -l)
  printf '%s\n' "$savers" | tail -n +$((random % count + 1)) | head -n 1
}

# We can just run savers in a loop, until one sticks; xsecurelock will kill our
# entire process group anyway when unlocking.
while :; do
  saver=$(randomsaver)
  if [ -n "$saver" ]; then
    $saver
  fi
  sleep 2
  echo >&2 "Screen saver failed: $saver. Trying another one..."
  random=$((random + 1))
done &

exec ./saver_blank
